{"version":3,"file":"static/js/93.e0849f10.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactsHub/ContactForm/ContactForm.module.css?fccc","components/ContactsHub/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsHub/ContactList/ContactList.module.css?26f0","components/ContactsHub/ContactList/ContactList.jsx","components/ContactsHub/Contacts/Contacts.styled.jsx","components/ContactsHub/Contacts/Contacts.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.error;\n\nexport const selectFilterValue = state => state.contacts.filter;\n\nexport const selectVisibleContacts = state => {\n  const items = selectContacts(state);\n  const filterValue = selectFilterValue(state);\n  const visibleContacts = items.filter(item =>\n    item.name.toLowerCase().includes(filterValue.toLowerCase())\n  );\n  return visibleContacts;\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__vOqVF\",\"form-input\":\"ContactForm_form-input__73UfB\",\"form-btn\":\"ContactForm_form-btn__hyvz7\"};","import { useState } from 'react';\nimport { NotificationManager } from 'react-notifications';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [userName, setUserName] = useState('');\n  const [userNumber, setUserNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const items = useSelector(selectContacts);\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    if (name === 'name') {\n      setUserName(value);\n    } else {\n      setUserNumber(value);\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    if (items.some(el => el.name === userName)) {\n      NotificationManager.info(`${userName} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name: userName, number: userNumber }));\n    }\n    reset();\n  };\n\n  const reset = () => {\n    setUserName('');\n    setUserNumber('');\n  };\n\n  return (\n    <form className={css['form']} onSubmit={handleSubmitForm}>\n      <label>\n        Name\n        <input\n          id={nanoid()}\n          type=\"text\"\n          name=\"name\"\n          className={css['form-input']}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={userName}\n          onChange={handleInputChange}\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          id={nanoid()}\n          type=\"tel\"\n          name=\"number\"\n          className={css['form-input']}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={userNumber}\n          onChange={handleInputChange}\n          required\n        />\n      </label>\n\n      <button className={css['form-btn']} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter-label\":\"Filter_filter-label__memAx\",\"filter-input\":\"Filter_filter-input__dFgnI\"};","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterValue } from 'redux/contacts/selectors';\nimport { setFilterValue } from 'redux/contacts/contactsSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilterValue);\n\n  const changeFilter = e => {\n    dispatch(setFilterValue(e.currentTarget.value));\n  };\n\n  return (\n    <label className={css['filter-label']}>\n      Find contacts by name\n      <input\n        className={css['filter-input']}\n        type=\"text\"\n        value={filter}\n        onChange={changeFilter}\n      ></input>\n    </label>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contact-list\":\"ContactList_contact-list__B8vax\",\"contact-item\":\"ContactList_contact-item__d0+n+\",\"contact-number\":\"ContactList_contact-number__yYe1j\",\"contact-btn\":\"ContactList_contact-btn__6YclI\"};","import css from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ul className={css['contact-list']}>\n      {visibleContacts.map(({ name, number, id }) => (\n        <li key={id} className={css['contact-item']}>\n          <p>\n            {name}: <span className={css['contact-number']}>{number}</span>\n          </p>\n          <button\n            type=\"button\"\n            className={css['contact-btn']}\n            onClick={() => handleDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 15px;\n  margin: 0 auto;\n  width: 320px;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport ContactForm from 'components/ContactsHub/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport ContactList from 'components/ContactsHub/ContactList/ContactList';\nimport { NotificationContainer } from 'react-notifications';\nimport { Container } from './Contacts.styled';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <>\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Your Contacts</h2>\n        <Filter />\n        {isLoading && !error && <Loader />}\n        <ContactList />\n        <NotificationContainer />\n      </Container>\n    </>\n  );\n};\n\nexport default Contacts;\n","import { useDispatch } from 'react-redux';\nimport Contacts from 'components/ContactsHub/Contacts';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Contacts />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilterValue","filter","selectVisibleContacts","filterValue","item","name","toLowerCase","includes","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","useState","userName","setUserName","userNumber","setUserNumber","dispatch","useDispatch","useSelector","handleInputChange","e","currentTarget","value","reset","className","css","onSubmit","preventDefault","some","el","NotificationManager","addContact","number","type","pattern","title","onChange","required","setFilterValue","visibleContacts","map","onClick","deleteContact","handleDeleteContact","Container","styled","Loader","useEffect","fetchContacts"],"sourceRoot":""}