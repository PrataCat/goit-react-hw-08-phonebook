{"version":3,"file":"static/js/912.7e7eab71.chunk.js","mappings":"4NAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,SAASC,KAA5B,EAEtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASA,SAASG,SAA5B,EAEvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASA,SAASK,KAA5B,EAEnBC,EAAoB,SAAAP,GAAK,OAAIA,EAAMC,SAASO,MAAnB,EAEzBC,EAAwB,SAAAT,GACnC,IAAME,EAAQH,EAAeC,GACvBU,EAAcH,EAAkBP,GAItC,OAHwBE,EAAMM,QAAO,SAAAG,GAAI,OACvCA,EAAKC,KAAKC,cAAcC,SAASJ,EAAYG,cADN,GAI1C,E,8BCIGE,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,E,6BCjCYQ,EAAOC,EAAAA,GAAAA,KAAH,wGAOJC,EAAYD,EAAAA,GAAAA,MAAH,qQAeTE,EAAUF,EAAAA,GAAAA,OAAH,y/B,SCiDpB,EAjEoB,WAClB,OAAgCG,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KAEMC,GAAWC,EAAAA,EAAAA,MACXjC,GAAQkC,EAAAA,EAAAA,IAAYrC,GAEpBsC,EAAoB,SAAAC,GACxB,MAAwBA,EAAEC,cAAlB3B,EAAR,EAAQA,KAAM4B,EAAd,EAAcA,MACD,SAAT5B,EACFmB,EAAYS,GAEZP,EAAcO,EAEjB,EAYKC,EAAQ,WACZV,EAAY,IACZE,EAAc,GACf,EAED,OACE,UAACR,EAAD,CAAMiB,SAhBiB,SAAAJ,GACvBA,EAAEK,iBACEzC,EAAM0C,MAAK,SAAAC,GAAE,OAAIA,EAAGjC,OAASkB,CAAhB,IACfgB,EAAAA,GAAAA,KAAA,UAA4BhB,EAA5B,6BAEAI,GAASa,EAAAA,EAAAA,IAAW,CAAEnC,KAAMkB,EAAUkB,OAAQhB,KAEhDS,GACD,EAQC,WACE,qCAEE,SAACd,EAAD,CACEV,GAAIF,IACJkC,KAAK,OACLrC,KAAK,OACLsC,QAAQ,yHACRC,MAAM,yIACNX,MAAOV,EACPsB,SAAUf,EACVgB,UAAQ,QAGZ,uCAEE,SAAC1B,EAAD,CACEV,GAAIF,IACJkC,KAAK,MACLrC,KAAK,SACLsC,QAAQ,yFACRC,MAAM,+FACNX,MAAOR,EACPoB,SAAUf,EACVgB,UAAQ,QAIZ,SAACzB,EAAD,CAASqB,KAAK,SAAd,2BAGL,E,UCrEYK,EAAc5B,EAAAA,GAAAA,MAAH,iEAKX6B,EAAc7B,EAAAA,GAAAA,MAAH,qQCkBxB,EApBe,WACb,IAAMQ,GAAWC,EAAAA,EAAAA,MACX3B,GAAS4B,EAAAA,EAAAA,IAAY7B,GAM3B,OACE,UAAC+C,EAAD,oCAEE,SAACC,EAAD,CACEN,KAAK,OACLT,MAAOhC,EACP4C,SAVe,SAAAd,GACnBJ,GAASsB,EAAAA,EAAAA,GAAelB,EAAEC,cAAcC,OACzC,MAYF,E,UCrBYiB,EAAe/B,EAAAA,GAAAA,GAAH,wGAOZgC,EAAchC,EAAAA,GAAAA,GAAH,6EAKXiC,EAAgBjC,EAAAA,GAAAA,KAAH,+DAKbkC,EAAalC,EAAAA,GAAAA,OAAH,6/BCevB,EAxBoB,WAClB,IAAMQ,GAAWC,EAAAA,EAAAA,MACX0B,GAAkBzB,EAAAA,EAAAA,IAAY3B,GAMpC,OACE,SAACgD,EAAD,UACGI,EAAgBC,KAAI,gBAAGlD,EAAH,EAAGA,KAAMoC,EAAT,EAASA,OAAQ/B,EAAjB,EAAiBA,GAAjB,OACnB,UAACyC,EAAD,YACE,yBACG9C,EADH,MACU,SAAC+C,EAAD,UAAgBX,QAE1B,SAACY,EAAD,CAAYX,KAAK,SAASc,QAAS,kBAXf,SAAA9C,GAC1BiB,GAAS8B,EAAAA,EAAAA,IAAc/C,GACxB,CASgDgD,CAAoBhD,EAA1B,EAAnC,sBAJgBA,EADC,KAY1B,EC9BYiD,EAAYxC,EAAAA,GAAAA,IAAH,8EC0BtB,EAnBiB,WACf,IAAMtB,GAAYgC,EAAAA,EAAAA,IAAYjC,GACxBG,GAAQ8B,EAAAA,EAAAA,IAAY/B,GAE1B,OACE,+BACE,UAAC6D,EAAD,YACE,uCACA,SAAC,EAAD,KACA,2CACA,SAAC,EAAD,IACC9D,IAAcE,IAAS,SAAC6D,EAAA,EAAD,KACxB,SAAC,EAAD,KACA,SAAC,KAAD,QAIP,ECPD,EAdqB,WACnB,IAAMjC,GAAWC,EAAAA,EAAAA,MAMjB,OAJAiC,EAAAA,EAAAA,YAAU,WACRlC,GAASmC,EAAAA,EAAAA,MACV,GAAE,CAACnC,KAGF,+BACE,SAAC,EAAD,KAGL,C","sources":["redux/contacts/selectors.js","../node_modules/nanoid/index.browser.js","components/ContactsHub/ContactForm/ContactForm.styled.jsx","components/ContactsHub/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactsHub/ContactList/ContactList.styled.jsx","components/ContactsHub/ContactList/ContactList.jsx","components/ContactsHub/Contacts/Contacts.styled.jsx","components/ContactsHub/Contacts/Contacts.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.error;\n\nexport const selectFilterValue = state => state.contacts.filter;\n\nexport const selectVisibleContacts = state => {\n  const items = selectContacts(state);\n  const filterValue = selectFilterValue(state);\n  const visibleContacts = items.filter(item =>\n    item.name.toLowerCase().includes(filterValue.toLowerCase())\n  );\n  return visibleContacts;\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 15px;\n`;\n\nexport const FormInput = styled.input`\n  display: block;\n  width: 100%;\n  height: 30px;\n  background-color: #ebebee;\n\n  border: 3px solid;\n  border-image: linear-gradient(\n      355deg,\n      var(--accent-color-light),\n      var(--accent-color-dark)\n    )\n    10;\n`;\n\nexport const FormBtn = styled.button`\n  width: 100%;\n  height: 30px;\n  border: none;\n  background-image: radial-gradient(\n    100% 100% at 100% 0,\n    var(--accent-color-light) 0,\n    var(--accent-color-dark) 100%\n  );\n  box-shadow: rgba(45, 35, 66, 0.4) 0 2px 4px,\n    rgba(45, 35, 66, 0.3) 0 7px 13px -3px, rgba(58, 65, 111, 0.5) 0 -3px 0 inset;\n  color: #fff;\n  cursor: pointer;\n  transition: box-shadow 0.15s, transform 0.15s;\n  font-weight: normal;\n  font-size: 14px;\n  letter-spacing: 0.08em;\n\n  :focus {\n    box-shadow: var(--accent-color-dark) 0 0 0 1.5px inset,\n      rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px,\n      var(--accent-color-dark) 0 -3px 0 inset;\n  }\n\n  :hover {\n    box-shadow: rgba(45, 35, 66, 0.4) 0 4px 8px,\n      rgba(45, 35, 66, 0.3) 0 7px 13px -3px,\n      var(--accent-color-dark) 0 -1px 0 inset;\n    transform: translateY(-1px);\n  }\n\n  :active {\n    box-shadow: var(--accent-color-dark) 0 3px 7px inset;\n    transform: translateY(1px);\n  }\n`;\n","import { useState } from 'react';\nimport { NotificationManager } from 'react-notifications';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Form, FormBtn, FormInput } from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [userName, setUserName] = useState('');\n  const [userNumber, setUserNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const items = useSelector(selectContacts);\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    if (name === 'name') {\n      setUserName(value);\n    } else {\n      setUserNumber(value);\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    if (items.some(el => el.name === userName)) {\n      NotificationManager.info(`${userName} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name: userName, number: userNumber }));\n    }\n    reset();\n  };\n\n  const reset = () => {\n    setUserName('');\n    setUserNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmitForm}>\n      <label>\n        Name\n        <FormInput\n          id={nanoid()}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={userName}\n          onChange={handleInputChange}\n          required\n        />\n      </label>\n      <label>\n        Number\n        <FormInput\n          id={nanoid()}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={userNumber}\n          onChange={handleInputChange}\n          required\n        />\n      </label>\n\n      <FormBtn type=\"submit\">Add contact</FormBtn>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  font-weight: 500;\n  font-size: 16px;\n`;\n\nexport const FilterInput = styled.input`\n  display: block;\n  width: 100%;\n  height: 30px;\n  background-color: #ebebee;\n\n  border: 3px solid;\n  border-image: linear-gradient(\n      355deg,\n      var(--accent-color-light),\n      var(--accent-color-dark)\n    )\n    10;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterValue } from 'redux/contacts/selectors';\nimport { setFilterValue } from 'redux/contacts/contactsSlice';\nimport { FilterInput, FilterLabel } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilterValue);\n\n  const changeFilter = e => {\n    dispatch(setFilterValue(e.currentTarget.value));\n  };\n\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        value={filter}\n        onChange={changeFilter}\n      ></FilterInput>\n    </FilterLabel>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 20px;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const ContactNumber = styled.span`\n  display: block;\n  font-size: 14px;\n`;\n\nexport const ContactBtn = styled.button`\n  height: 25px;\n  margin-top: 5px;\n  border: none;\n  background-image: radial-gradient(\n    100% 100% at 100% 0,\n    var(--accent-color-light) 0,\n    var(--accent-color-dark) 100%\n  );\n  box-shadow: rgba(45, 35, 66, 0.4) 0 2px 4px,\n    rgba(45, 35, 66, 0.3) 0 7px 13px -3px, rgba(58, 65, 111, 0.5) 0 -3px 0 inset;\n  color: #fff;\n  cursor: pointer;\n  transition: box-shadow 0.15s, transform 0.15s;\n  font-weight: normal;\n  font-size: 12px;\n  letter-spacing: 0.08em;\n\n  :focus {\n    box-shadow: var(--accent-color-dark) 0 0 0 1.5px inset,\n      rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px,\n      var(--accent-color-dark) 0 -3px 0 inset;\n  }\n\n  :hover {\n    box-shadow: rgba(45, 35, 66, 0.4) 0 4px 8px,\n      rgba(45, 35, 66, 0.3) 0 7px 13px -3px,\n      var(--accent-color-dark) 0 -1px 0 inset;\n    transform: translateY(-1px);\n  }\n\n  :active {\n    box-shadow: var(--accent-color-dark) 0 3px 7px inset;\n    transform: translateY(1px);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  ContactsList,\n  ContactBtn,\n  ContactItem,\n  ContactNumber,\n} from './ContactList.styled';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ContactsList>\n      {visibleContacts.map(({ name, number, id }) => (\n        <ContactItem key={id}>\n          <p>\n            {name}: <ContactNumber>{number}</ContactNumber>\n          </p>\n          <ContactBtn type=\"button\" onClick={() => handleDeleteContact(id)}>\n            Delete\n          </ContactBtn>\n        </ContactItem>\n      ))}\n    </ContactsList>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 15px;\n  margin: 0 auto;\n  width: 320px;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport ContactForm from 'components/ContactsHub/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport ContactList from 'components/ContactsHub/ContactList/ContactList';\nimport { NotificationContainer } from 'react-notifications';\nimport { Container } from './Contacts.styled';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <>\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Your Contacts</h2>\n        <Filter />\n        {isLoading && !error && <Loader />}\n        <ContactList />\n        <NotificationContainer />\n      </Container>\n    </>\n  );\n};\n\nexport default Contacts;\n","import { useDispatch } from 'react-redux';\nimport Contacts from 'components/ContactsHub/Contacts';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Contacts />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilterValue","filter","selectVisibleContacts","filterValue","item","name","toLowerCase","includes","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Form","styled","FormInput","FormBtn","useState","userName","setUserName","userNumber","setUserNumber","dispatch","useDispatch","useSelector","handleInputChange","e","currentTarget","value","reset","onSubmit","preventDefault","some","el","NotificationManager","addContact","number","type","pattern","title","onChange","required","FilterLabel","FilterInput","setFilterValue","ContactsList","ContactItem","ContactNumber","ContactBtn","visibleContacts","map","onClick","deleteContact","handleDeleteContact","Container","Loader","useEffect","fetchContacts"],"sourceRoot":""}